# -*- coding: utf-8 -*-
"""Leady Lawalatta KM-05: Functions, OOP, Time Complexity .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yKnWFGy1KZ4Nw70VVgssTiPHAASYf7A0

# **Fungsi**
"""

# Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("wokee")

# Deklarasi Fungsi dengan pengembalian
def tambah(a, b):
  return a + b;

# Memanggil Fungsi
print(tambah(2, 3))

def nama_fungsi(arg1, arg2, ...):
  # isi fungsi

def fungsi_dengan_pengembalian(arg1, arg2, ...):
  # isi fungsi
  return 'sesuatu'

# Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("Leady Lawalatta")

# Deklarasi Fungsi dengan pengembalian
def kali(a, b):
  return a * b;

# Memanggil Fungsi
print(kali(4, 5))

"""# **Method**"""

class NamaClass:
  def nama_method(arg1, arg2, ...):
    # isi method

# Deklarasi Object (Class)
class Kucing(object):
  def meong(self):
    print("meeooong")

# Memanggil method
cat = Kucing()
cat.meong()

# Deklarasi Object (Class)
class Anjing(object):
  def gukguk(self):
    print("guk..guk..guk")

dog = Anjing()
dog.gukguk()

"""# **Lambda Expression**"""

# Lambda expression
tambah = lambda a, b: (a + b)
print(tambah(2, 3))

tambah = lambda a, b: (a + b)
print(tambah(5, 2))

"""# **Object Oriented Programming**

## **Encapsulation**
"""

nama = "cemong"
usia = 1
warna = "putih coklat muda"
jenis = "anggora"

def meongg():
  print("meeeoonnggg... ")

def info_kucing(nama, warna, jenis):
  print(f"nama: {nama}, usia: {usia}, warna: {warna}, jenis: {jenis}")

info_kucing(nama, usia, warna, jenis)


class Kucing:
  def __init__(self, nama, usia, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def meong(self):
    print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, warna: {self.warna}, jenis: {self.jenis}")


kucing1 = Kucing("cemong", 1, "putih coklat muda", "anggora")

kucing1.info()

"""## **Abstraction**"""

# Memanggil method dari objek tanpa harus mengetahui cara kerja method
kucing1.myfunc()

"""## **Inheritence**"""

class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


animal1 = Binatang("cemong", 1, "omnivora", True)

animal1.info()

class Kucing(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_kucing):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_kucing = jenis_kucing
  
  def meong(self):
    print("meeeonnggg")

  def info_kucing(self):
    print(f"warna: {self.warna}, jenis kucing: {self.jenis_kucing}")

cat1 = Kucing("cemong", 1, "omnivora", True, "putih coklat muda", "anggora")

cat1.info()
cat1.info_kucing()

"""## **Polymorphism**"""

class Ikan(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_air, jenis_ikan):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_air = jenis_air
    self.jenis_ikan = jenis_ikan
  
  def berenang(self, durasi):
    print("wushh... wush... ")

  def info_ikan(self):
    print(f"warna: {self.warna}, jenis ikan: {self.jenis_ikan}, jenis air: {self.jenis_air}")

fish1 = Ikan("Jago", 2, "omnivora", False, "Merah Putih", "Tawar", "Cupang")

fish1.info()
fish1.info_ikan()
fish1.tidur(5)

"""## **Activity OOP**

Buatlah 3 OOP beserta turunannya dari objek sekitar, buat ulang seperti yang diatas (encapsulation, abstaction, inheritance, polymorphism)
"""

#Encapsulation
nama = "anggrek"
nama_ilmiah = "paraphalaenopsis serpentilingua"
warna = "putih dengan corak kuning dan merah"

def info_bunga(nama, nama_ilmiah, warna,):
  print(f"nama: {nama}, nama ilmiah : {nama_ilmiah}, warna: {warna}")

info_bunga(nama, nama_ilmiah, warna)

class Bunga:
  def __init__(self, nama, nama_ilmiah, warna):
    self.nama = nama
    self.nama_ilmiah = nama_ilmiah
    self.warna = warna

  def myfunc(self):
    print("Hay aku adalah bunga " + self.nama)

  def info(self):
    print(f"nama: {nama}, nama ilmiah : {nama_ilmiah}, warna: {warna}")

bunga1 = Bunga("anggrek","paraphalaenopsis serpentilingua","putih dengan corak kuning dan merah")

bunga1.info()

nama = "Honda CRV"
tahun_produksi = 2000 #usia diganti tahun_produksi
warna = "Merah"
tempat_produksi = "Indonesia" #jenis diganti tempat_produksi

#def meongg():
  #print("meeeoonnggg... ")

def info_mobil(nama, tahun_produksi, warna, jenis): #info_kucing diganti info_mobil
  print(f"nama: {nama}, tahun_produksi: {tahun_produksi}, warna: {warna}, tempat_produksi: {tempat_produksi}")

info_mobil(nama, tahun_produksi, warna, tempat_produksi)


class Mobil:#Kucing diganti Mobil
  def __init__(self, nama, tahun_produksi, warna, tempat_produksi):
    self.nama = nama
    self.tahun_produksi = tahun_produksi
    self.warna = warna
    self.tempat_produksi = tempat_produksi

  def myfunc(self):
    print("Hello aku adalah mobil " + self.nama)
  
  #def meong(self):
    #print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, tahun_produksi: {self.tahun_produksi}, warna: {self.warna}, tempat_produksi: {self.tempat_produksi}")


mobil1 = Mobil("Honda CRV", 2000, "Merah", "Indonesia")

mobil1.info()

nama = "Redmi"
Tahun = 2019
warna = "Hitam"
jenis = "Note 8"

def redmi():
  print("Redmi nih!!... ")

def info_handphone(nama, tahun, warna, jenis):
  print(f"nama: {nama}, tahun: {Tahun}, warna: {warna}, jenis: {jenis}")

info_handphone(nama, Tahun, warna, jenis)

class handphone:
  def __init__(self, nama, Tahun, warna, jenis):
    self.nama = nama
    self.Tahun = Tahun
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello handphone kamu apaaa? " + self.nama)
  
  def tringtring(self):
    print("Redmi nih!!... ")

  def info(self):
    print(f"nama: {self.nama}, Tahun: {self.Tahun}, warna: {self.warna}, jenis: {self.jenis}")


handphone1 = handphone("redmi", 2019, "Hitam", "note 8")

handphone1.info()

#Abstaction
# Memanggil method dari objek tanpa harus mengetahui cara kerja method
bunga1.myfunc()

mobil1.myfunc()

handphone1.myfunc()

#Inheritance
class Tumbuhan(object):
  def __init__(self, nama, jenis, asal):
    self.nama = nama
    self.jenis = jenis
    self.asal = asal

  def layu(self, durasi):
    for x in range(durasi):
      print("kering.... ")

  def info(self):
    print(f"nama: {self.nama}, jenis: {self.jenis}, asal: {self.asal}")


flower = Tumbuhan("anggrek","anggrek_bulan", True)

flower.info()

class Bunga(Tumbuhan):
  def __init__(self,  nama, jenis, asal, warna, nama_latin):
    super().__init__(nama, jenis, asal)
    self.warna = warna
    self.nama_latin = nama_latin

  def info_bunga(self):
    print(f"warna: {self.warna}, nama_latin: {self.nama_latin}")

bunga1 = Bunga("anggrek","anggrek_bulan", True, "putih corak kuning","phalaenopsis amabilis")

bunga1.info()
bunga1.info_bunga()

class Kendaraan(object): #Binatang diganti Kendaraan
  def __init__(self, nama, tahun_produksi, tempat_produksi, diesel):
    self.nama = nama
    self.tahun_produksi = tahun_produksi #usia diganti tahun_produksi
    self.tempat_produksi = tempat_produksi #jenis diganti tempat_produksi
    self.diesel = diesel #mamalia diganti diesel

  def tempuh(self, durasi): #tidur diganti tempuh
    for x in range(durasi):
      print("...........")

  def info(self):
    print(f"nama: {self.nama}, tahun_produksi: {self.tahun_produksi}, tempat_produksi: {self.tempat_produksi}, diesel: {self.diesel}")


kendaraan1 = Kendaraan("Honda CRV", 2000, "Indonesia", True)

kendaraan1.info()

class Mobil(Kendaraan):
  def __init__(self,  nama, tahun_produksi, tempat_produksi, diesel, warna, tempat_produksi_mobil):
    super().__init__(nama, tahun_produksi, tempat_produksi, diesel)
    self.warna = warna
    self.tempat_produksi_mobil = tempat_produksi_mobil #jenis_kucing diganti tempat_produksi_mobil
  
  #def meong(self):
    #print("meeeonnggg")

  def info_mobil(self):
    print(f"warna: {self.warna}, tempat_produksi_mobil: {self.tempat_produksi_mobil}")

car1 = Mobil("Honda CRV", 2000, "Indonesia", True, "Merah", "PT Astra Honda")

car1.info()
car1.info_mobil()

class perusahaan(object):
  def __init__(self, nama, Tahun, jenis, perusahaan):
    self.nama = nama
    self.Tahun = Tahun
    self.jenis = jenis
    self.perusahaan = perusahaan

  def tidur(self, durasi):
    for x in range(durasi):
      print("HAlo halo ahhah ")

  def info(self):
    print(f"nama: {self.nama}, tahun: {self.Tahun}, jenis: {self.jenis}, MI: {self.perusahaan}")


perusahaan1 = perusahaan("redmi", 2019, "MI", True)

perusahaan1.info()

class Handphone(perusahaan):
  def __init__(self,  nama, Tahun, jenis, perusahaan, warna, jenis_handphone):
    super().__init__(nama, Tahun, jenis, perusahaan)
    self.warna = warna
    self.jenis_handphone = jenis_handphone
  
  def handphone(self):
    print("Redmi nih!!")

  def info_handphone(self):
    print(f"warna: {self.warna}, jenis handphone: {self.jenis_handphone}")

cat1 = Handphone("Redmi", 2019, "note 8", True, "Hitam", "MI")

cat1.info()
cat1.info_handphone()

#Polymorphism
class Anggrek(Tumbuhan):
  def __init__(self,nama, jenis, warna, asal):
    super().__init__(nama, jenis, warna)
    self.asal = asal
  
  def mati(self, durasi):
    for x in range(durasi):
      print('kering')

  def info_tipe(self):
    print(f"asal: {self.asal}")

Flower1 = Anggrek("anggrek", "Kantung Kolopaking", "hijau", "Cupang")

Flower1.info()
Flower1.info_tipe()
Flower1.mati(10)

class Motor(Kendaraan):
  def __init__(self,  nama, tahun_produksi, tempat_produksi, diesel, warna, jenis_jalan, jenis_motor):
    super().__init__(nama, tahun_produksi, tempat_produksi, diesel)
    self.warna = warna
    self.jenis_jalan = jenis_jalan
    self.jenis_motor = jenis_motor
  
  def menempuh(self, durasi):
    print("ngeng ngeng")

  def info_motor(self):
    print(f"warna: {self.warna}, jenis_motor: {self.jenis_motor}, jenis_jalan: {self.jenis_jalan}")

motor1 = Motor("Honda CBR", 2015, "Indonesia", False, "Biru", "Aspal", "Kopling")

motor1.info()
motor1.info_motor()
motor1.menempuh(150)

class samsung(perusahaan):
  def __init__(self,  nama, Tahun, jenis, mamalia, warna, jenis_samsung):
    super().__init__(nama, Tahun, jenis, mamalia)
    self.warna = warna
    self.jenis_samsung = jenis_samsung
  
  def pengembang(self, durasi):
    print("luarbiasa luarbiasa ")

  def info_samsung(self):
    print(f"warna: {self.warna}, jenis samsung: {self.jenis_samsung}")

hape1 = samsung("galaxy", 2019, "m24", False, "hitam", "new")
hape1.info()
hape1.info_samsung()
hape1.tidur(5)

"""# **Time Complexity**
## Activity 

Hitung time complexity dengan bigO Notation pada algoritma berikut:

* Tidak perlu di run
"""

# 1
#Big O(3)= O(1)

arr = [1, 2, 3, 4, 5] #Big O(1)

print(arr[0]) #Big O(1)
print(arr[1]) #Big O(1)

# 2
#Big O(3 + n) = O(n)

print(arr[2]) #Big O(1)
for number in arr: #Big O(n)
  print(number)
print(arr[1]) #Big O(1)
print(arr[2]) #Big O(1)

# 3
#Big O(3 + n) = O(n)

arr2 = [6, 7, 8, 9, 10] #Big O(1)

for number in arr: #Big O(n)
  print(number)
for number in arr2: #Big O(n)
  print(number)
print(arr2[4]) #Big O(1)

# 4
#Big O(1 + 2n)= O(n)

print(arr2[1]) #Big O(1)
for number in arr: #Big O(n)
  print(number)
for number in arr: #Big O(n)
  print(number)

# 5
#Big O(2 + n^2)= O(n^2)

for number in arr: #Big O(n)
  for number2 in arr2: #Big O(n)
    print(number+number2)
print(arr[1]+arr2[1]) #Big O(1)
print(arr2[2]) #Big O(1)

# 6 
#Big O(1 + n^2)= O(n^2)

for number in arr: #Big O(n)
  for number2 in arr: #Big O(n)
    print(number+number2)
print(arr) #Big O(1)

# 7 
#Big O(3 + n^3)= O(n^3)

for number in arr: #Big O(n)
  for number2 in arr2: #Big O(n)
    for number3 in arr: #Big O(n)
      print(number+number2+number3)
print(arr[1]) #Big O(1)
print(arr2[2]) #Big O(1)
print(arr2[3]) #Big O(1)

# 8
#Big O(2 + n + n^2)= O(n^2)

for number in arr: #Big O(n)
  print(number)
print(arr2) #Big O(1)
for number in arr: #Big O(n)
  for number2 in arr2: #Big O(n)
    print(number+number2)
print(arr) #Big O(1)

# 9 
# algoritma bubble sort

mylist = [1,5,10,15,20,25,30,2,6,8,9]
print(mylist)
def bubbleSort(mylist):
    # outer loop
    for i in range(len(mylist)-1, 0, -1):
        # inner loop
        for j in range(i):
            if mylist[j] > mylist[j+1]:
                # swap the value
                temp = mylist[j]
                mylist[j] = mylist[j+1]
                mylist[j+1] = temp
                
    return mylist

    firstlist = [5, 8, 3, 1]
    print(bubbleSort(firstlist))

# 10

# algoritma linear search

myList = [1,5,10,15,20,25,30,2,6,8,9] # Example List
cari = int(input("Masukkan Angka Yang Anda Cari : ")) # angka yang ingin dicari

#fungsi
def searchNumber(List,search):
    counter = 0
    while counter != len(myList):
        if myList[counter] == search:
            result = counter
        counter += 1
    return result

#pemanggilan Fungsi
hasil = searchNumber(myList,cari)
if cari not in myList:
    print("Number Not Found !!!")
else:
    print('Number %s in index %s'% (cari,hasil))

# 11

# algoritma binary search
yourList = [2,4,9,8,1,3,5,6,3] # Example List
yourNumber = int(input('Insert Number to search ? ')) # angka yang ingin dicari

#Fungsi
def searchNumber(Number,List):
    found = False     #Untuk memberikan kondisi adanya angka
    List.sort() # binary search harus diurutkan
    firstIndex = 0  #index pertama
    lastIndex = len(List)-1 #index terakhir
    while firstIndex <= lastIndex and not found:
        middleIndex = (firstIndex + lastIndex) // 2     #mancari index tengah
        if List[middleIndex] == Number:
            found = True
        else:
            if Number < List[middleIndex]:
                lastIndex = middleIndex - 1
            else:
                firstIndex = middleIndex + 1
    return found
    
#Pemanggilam Fungsi ditandai dengan pemanggilan nama fungsi
result = searchNumber(yourNumber,yourList)
if result:
    print('Number %s is Found in List'% yourNumber)
else:
    print('Number %s not Found in List' % yourNumber)